{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TL;DR : Jump right into action by running pretrained models using CLI or Python scripts. Installation : Installation guide for Windows, Linux and Mac systems using pip or Docker containers. Tutorials : Find in-depth explanations of config parameters and Deep Learning components as well as training and testing scripts through Jupyter Notebooks. How to Contribute! : Learn how you can extend this library using custom trained models, datasets, new language support and/or new deep learning component(s). Reference : Detailed documentation of each Python file in UCR Repository with its respective functions and classes. About U C R is an Open Source , Easy to use Python library to build Production Ready OCR applications with its highly I ntuitive, M odular & E xtensible API design and off-the-shelf Pretrained Models for over 25 languages. Features Supports SOTA Text Detection and Recognition models Built on top of Pytorch and Pytorch Lightning Supports over 25 languages Model Zoo contains 27 Pretrained Models across 25 languages Modular Design Language allows Pick and Choose of different components Easily extensible with Custom Components and attributes Hydra config enables Rapid Prototyping with multiple configurations Support for Packaging, Logging and Deployment tools straight out of the box Note: Some features are still in active development and might not be available! Workflow Execution flow of UCR is displayed above. Broadly it can be divided into 4 sub-parts: Input (image/folder path or web address) is fed into the Detection model which outputs bounding box coordinates of all the text boxes. The detected boxes are then checked for Orientation and corrected accordingly. Next, Recognition model runs on the corrected text boxes. It returns bounding box information and OCR output. Lastly, an optional Post Processing module is executed to improve/modify the results. Click Here to get started with the Code! Acknowledgement Substantial part of the UCR library is either inspired or inherited from the PaddleOCR library. Wherever possible the repository has been ported from PaddlePaddle to PyTorch framework including the direct translation of model parameters. Also, a big thanks to Clova AI , for open sourcing their testing script and pretrained models ( CRAFT ). A complete list of the Implemented Models along with their respective citation is tabulated here !","title":"UCR"},{"location":"#about","text":"U C R is an Open Source , Easy to use Python library to build Production Ready OCR applications with its highly I ntuitive, M odular & E xtensible API design and off-the-shelf Pretrained Models for over 25 languages.","title":"About"},{"location":"#features","text":"Supports SOTA Text Detection and Recognition models Built on top of Pytorch and Pytorch Lightning Supports over 25 languages Model Zoo contains 27 Pretrained Models across 25 languages Modular Design Language allows Pick and Choose of different components Easily extensible with Custom Components and attributes Hydra config enables Rapid Prototyping with multiple configurations Support for Packaging, Logging and Deployment tools straight out of the box Note: Some features are still in active development and might not be available!","title":"Features"},{"location":"#workflow","text":"Execution flow of UCR is displayed above. Broadly it can be divided into 4 sub-parts: Input (image/folder path or web address) is fed into the Detection model which outputs bounding box coordinates of all the text boxes. The detected boxes are then checked for Orientation and corrected accordingly. Next, Recognition model runs on the corrected text boxes. It returns bounding box information and OCR output. Lastly, an optional Post Processing module is executed to improve/modify the results. Click Here to get started with the Code!","title":"Workflow"},{"location":"#acknowledgement","text":"Substantial part of the UCR library is either inspired or inherited from the PaddleOCR library. Wherever possible the repository has been ported from PaddlePaddle to PyTorch framework including the direct translation of model parameters. Also, a big thanks to Clova AI , for open sourcing their testing script and pretrained models ( CRAFT ). A complete list of the Implemented Models along with their respective citation is tabulated here !","title":"Acknowledgement"},{"location":"coming_soon/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"Coming Soon!"},{"location":"demo/","text":"Every Subsection here, contains a specific setting in which Experiments were conducted and corresponding Results reported. All the results are Reproducible with their respective Jupyter Notebook/Colab link attached to it! Default Configuration Example 1 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Example 2 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Example 3 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Whitelist/Blacklist characters Without Whitelist Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Whitelist 'en' Characters Python: 1 2 3 4 5 6 from ucr import UCR import string ocr = UCR ( whitelist = string . printable [: - 6 ]) # this selects only the english characters, numbers and punctuations which is equivalent to # whitelist='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True --whitelist \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_{|}~\" lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Without Blacklist Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' ) # select language: 'en_number' result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' lang .... \"en_number\" .... | type .... \"mobile\" .... | Blacklist Numbers Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' , blacklist = \"0123456789\" ) # blacklist numbers result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' --blacklist '0123456789' lang .... \"en_number\" .... | type .... \"mobile\" .... | Mobile/Server Configuration Mobile Backend Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Server Backend Python: 1 2 3 from ucr import UCR ocr = UCR ( type = 'server' ) # specified type=\"server\" result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True --type 'server lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Multiple Language Support English 'en_number' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' lang .... \"en_number\" .... | type .... \"mobile\" .... | German 'de' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'de' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'de' lang .... \"de\" .... | type .... \"mobile\" .... | French 'fr' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'fr' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'fr' lang .... \"fr\" .... | type .... \"mobile\" .... | Japanese, 'ja' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ja' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ja' lang .... \"ja\" .... | type .... \"mobile\" .... | Russian, 'ru' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ru' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ru' lang .... \"ru\" .... | type .... \"mobile\" .... | Korean, 'ko' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ko' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ko' lang .... \"ko\" .... | type .... \"mobile\" .... |","title":"Demo"},{"location":"demo/#default-configuration","text":"Example 1 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Example 2 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Example 3 Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... |","title":"Default Configuration "},{"location":"demo/#whitelistblacklist-characters","text":"Without Whitelist Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Whitelist 'en' Characters Python: 1 2 3 4 5 6 from ucr import UCR import string ocr = UCR ( whitelist = string . printable [: - 6 ]) # this selects only the english characters, numbers and punctuations which is equivalent to # whitelist='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True --whitelist \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_{|}~\" lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Without Blacklist Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' ) # select language: 'en_number' result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' lang .... \"en_number\" .... | type .... \"mobile\" .... | Blacklist Numbers Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' , blacklist = \"0123456789\" ) # blacklist numbers result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' --blacklist '0123456789' lang .... \"en_number\" .... | type .... \"mobile\" .... |","title":"Whitelist/Blacklist characters "},{"location":"demo/#mobileserver-configuration","text":"Mobile Backend Python: 1 2 3 from ucr import UCR ocr = UCR () # initialized with default parameters result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True lang .... \"ch_sim\" .... | type .... \"mobile\" .... | Server Backend Python: 1 2 3 from ucr import UCR ocr = UCR ( type = 'server' ) # specified type=\"server\" result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True --type 'server lang .... \"ch_sim\" .... | type .... \"mobile\" .... |","title":"Mobile/Server Configuration "},{"location":"demo/#multiple-language-support","text":"English 'en_number' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'en_number' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'en_number' lang .... \"en_number\" .... | type .... \"mobile\" .... | German 'de' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'de' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'de' lang .... \"de\" .... | type .... \"mobile\" .... | French 'fr' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'fr' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'fr' lang .... \"fr\" .... | type .... \"mobile\" .... | Japanese, 'ja' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ja' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ja' lang .... \"ja\" .... | type .... \"mobile\" .... | Russian, 'ru' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ru' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ru' lang .... \"ru\" .... | type .... \"mobile\" .... | Korean, 'ko' Python: 1 2 3 from ucr import UCR ocr = UCR ( l = 'ko' ) result = ocr ( 'input' , o = 'output' , save_image = True ) CLI: ucr predict 'input' -o 'output' --save_image True -l 'ko' lang .... \"ko\" .... | type .... \"mobile\" .... |","title":"Multiple Language Support "},{"location":"modelzoo/","text":"Tip Pretrained en_number model does not support special characters. To use special characters, use any other model (preferrably ch_sim ) and whitelist english characters as shown below: Python: 1 2 3 4 5 import string from ucr import UCR ocr = UCR ( l = 'ch_sim' , type = 'server' , whitelist = string . printable [: - 6 ] # use type='mobile' for small model # string.printable[:-6] = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\" result = ocr . predict ( 'input' , o = 'output' ) CLI: ucr predict 'input' -o='output' -l='ch_sim' --type='server' --whitelist=string.printable[:-6] Models List Language Lang-id Dict Link Model Link Arabic ar ar_dict.txt mobile Belarusian be be_dict.txt mobile Bulgarian bg bg_dict.txt mobile Chinese (Simplified) ch_sim ch_sim_dict.txt mobile / server Chinese (Traditional) ch_tra ch_tra_dict.txt mobile German de de_dict.txt mobile English (No Symbols) en_number en_number_dict.txt mobile English en en_dict.txt mobile Spanish es es_dict.txt mobile Persian (Farsi) fa farsi_dict.txt mobile French fr fr_dict.txt mobile Hindi hi hi_dict.txt mobile Italian it it_dict.txt mobile Japanese ja ja_dict.txt mobile Kannada kn kn_dict.txt mobile Korean ko ko_dict.txt mobile Marathi mr mr_dict.txt mobile Nepali ne ne_dict.txt mobile Occitan oc oc_dict.txt mobile Portuguese pt pt_dict.txt mobile Russian ru ru_dict.txt mobile Serbian (cyrillic) rs_cyrillic cyrillic_dict.txt mobile Serbian (latin) rs_latin latin_dict.txt mobile Tamil ta ta_dict.txt mobile Telugu te te_dict.txt mobile Uyghur ug ug_dict.txt mobile Ukranian uk uk_dict.txt mobile Urdu ur ur_dict.txt mobile","title":"Model Zoo"},{"location":"modelzoo/#models-list","text":"Language Lang-id Dict Link Model Link Arabic ar ar_dict.txt mobile Belarusian be be_dict.txt mobile Bulgarian bg bg_dict.txt mobile Chinese (Simplified) ch_sim ch_sim_dict.txt mobile / server Chinese (Traditional) ch_tra ch_tra_dict.txt mobile German de de_dict.txt mobile English (No Symbols) en_number en_number_dict.txt mobile English en en_dict.txt mobile Spanish es es_dict.txt mobile Persian (Farsi) fa farsi_dict.txt mobile French fr fr_dict.txt mobile Hindi hi hi_dict.txt mobile Italian it it_dict.txt mobile Japanese ja ja_dict.txt mobile Kannada kn kn_dict.txt mobile Korean ko ko_dict.txt mobile Marathi mr mr_dict.txt mobile Nepali ne ne_dict.txt mobile Occitan oc oc_dict.txt mobile Portuguese pt pt_dict.txt mobile Russian ru ru_dict.txt mobile Serbian (cyrillic) rs_cyrillic cyrillic_dict.txt mobile Serbian (latin) rs_latin latin_dict.txt mobile Tamil ta ta_dict.txt mobile Telugu te te_dict.txt mobile Uyghur ug ug_dict.txt mobile Ukranian uk uk_dict.txt mobile Urdu ur ur_dict.txt mobile","title":"Models List"},{"location":"tldr/","text":"Important Notice This is a Quick Start guide on how to use the UCR library with its existing pretrained models. For detailed information regarding its usage and advanced functionality, please refer to other sections! Setup Installation Prerequisites: Install compatible version of Pytorch and torchvision from official repository . Installation: Install the latest stable version of UCR: pip install -U ucr Test installation Test Installation (Optional): Run dummy tests! ucr test # Optional: Add -l/--lang='language_id' to test on particular language! ucr test -l = 'en_number' For other installation modes and complete setup instructions, see here ! Run Prediction Using Command Line: # run prediction on input file/folder ucr predict input_path -o = output_path -l = language_id List of all supported languages with their corresponding ids is shown here ! To view all available options for the CLI application: # view all CLI predict commands ucr predict --help Usage: ucr predict \"input_path\" --arguments [ARGS] Returns: Python Dictionary of either Dataframes(default) or Lists(if --return_type=\"list\" ). Key: filepath ; Value: df/list From Python scripts/Jupyter Notebooks: # Import and Initialize from ucr import UCR ocr = UCR ( l = 'en_number' ) # use l or lang='language_id'. # Run Predictions result = ocr . predict ( 'input_path' , o = 'output_path' ) # Returns dictionary of filepath:dataframe by default. # Set return_type=\"list\" for filepath:list of lists. Refer to the Demo page and/or Colab Notebook to see it in action! Argument List Name Type Default Help input str/array/list Required Path to input location, eg: file/folder path, web address, numpy array etc. More details here ! o/output str \"output\" Path to output folder. (optional) If both save_tsv and save_image are false, no output will be saved l/lang str \"ch_sim\" List of supported language-ids can be found here ! d/device str \"cuda\" Specify device to run on. [\"cuda\", \"cpu\"] return_type str \"df\" Specify return type and structure for OCR output. [\"list\", \"df\"] Details here ! save_tsv bool True If True, saves tab separated files inside tsv directory in output folder save_image bool False If True, saves image inside image directory in output folder verbose bool False Enable it to print info on console! backend str \"torch\" Select DL framework for inference . [\"torch\", \"onnx\"] type str \"mobile\" Select pretrained-model type. [\"mobile\", \"server\"] conf_location str None Specify config directory path! Default: None, implies use of pre-set config downloaded from web and stored in \"~/.ucr\" folder. force_download bool False Force download config files and pretrained models from web. Needed in case of incomplete/corrupt downloads. det bool True Whether to perform Detection or not on the input data! rec bool True Whether to perform Recognition or not on the input data! cls bool False Whether to perform Classification or not on the input data! system_overrides str/list None Overrides arguments in infer_system config file. Details here ! Detection args det_algorithm str \"CRAFT\" Specify Detection algorithm to select respective pretrained model. [\"DB\", \"CRAFT\"] Details here ! det_config_name str \"infer_det\" Specify det config filename located inside conf_location as shown here ! More on config structure here ! det_model_location str None Overrides model path present in det_config_name .yaml file! Useful for custom trained models. det_batch_size int 1 Batch size for performing Detection on input data. det_overrides str/list None Overrides arguments in infer_det config file. Details here ! Recognition args rec_algorithm str \"CRNN\" Specify recognition algorithm to select respective pretrained model. [\"CRNN\"] Details here ! rec_config_name str \"infer_rec\" Specify rec config filename located inside conf_location as shown here ! More on config structure here ! rec_model_location str None Overrides model path present in rec_config_name .yaml file! Useful for custom trained models. rec_batch_size int 8 Batch size for performing Recognition on input data. rec_overrides str/list None Overrides arguments in infer_rec config file. Details here ! whitelist str None Only whitelisted characters will be considered during prediction. See example here ! blacklist str None Blacklisted characters will be ignored during prediction. See example here ! Classification args cls_algorithm str \"CLS\" Specify classification algorithm to select respective pretrained model. [\"CLS\"] Details here ! cls_config_name str \"infer_cls\" Specify cls config filename located inside conf_location as shown here ! More on config structure here ! cls_model_location str None Overrides model path present in cls_config_name .yaml file! Useful for custom trained models. cls_batch_size int 8 Batch size for performing Classification on input data. cls_overrides str/list None Overrides arguments in infer_cls config file. Details here !","title":"TL;DR"},{"location":"tldr/#setup","text":"","title":"Setup"},{"location":"tldr/#installation","text":"Prerequisites: Install compatible version of Pytorch and torchvision from official repository . Installation: Install the latest stable version of UCR: pip install -U ucr","title":"Installation"},{"location":"tldr/#test-installation","text":"Test Installation (Optional): Run dummy tests! ucr test # Optional: Add -l/--lang='language_id' to test on particular language! ucr test -l = 'en_number' For other installation modes and complete setup instructions, see here !","title":"Test installation"},{"location":"tldr/#run-prediction","text":"Using Command Line: # run prediction on input file/folder ucr predict input_path -o = output_path -l = language_id List of all supported languages with their corresponding ids is shown here ! To view all available options for the CLI application: # view all CLI predict commands ucr predict --help Usage: ucr predict \"input_path\" --arguments [ARGS] Returns: Python Dictionary of either Dataframes(default) or Lists(if --return_type=\"list\" ). Key: filepath ; Value: df/list From Python scripts/Jupyter Notebooks: # Import and Initialize from ucr import UCR ocr = UCR ( l = 'en_number' ) # use l or lang='language_id'. # Run Predictions result = ocr . predict ( 'input_path' , o = 'output_path' ) # Returns dictionary of filepath:dataframe by default. # Set return_type=\"list\" for filepath:list of lists. Refer to the Demo page and/or Colab Notebook to see it in action!","title":"Run Prediction"},{"location":"tldr/#argument-list","text":"Name Type Default Help input str/array/list Required Path to input location, eg: file/folder path, web address, numpy array etc. More details here ! o/output str \"output\" Path to output folder. (optional) If both save_tsv and save_image are false, no output will be saved l/lang str \"ch_sim\" List of supported language-ids can be found here ! d/device str \"cuda\" Specify device to run on. [\"cuda\", \"cpu\"] return_type str \"df\" Specify return type and structure for OCR output. [\"list\", \"df\"] Details here ! save_tsv bool True If True, saves tab separated files inside tsv directory in output folder save_image bool False If True, saves image inside image directory in output folder verbose bool False Enable it to print info on console! backend str \"torch\" Select DL framework for inference . [\"torch\", \"onnx\"] type str \"mobile\" Select pretrained-model type. [\"mobile\", \"server\"] conf_location str None Specify config directory path! Default: None, implies use of pre-set config downloaded from web and stored in \"~/.ucr\" folder. force_download bool False Force download config files and pretrained models from web. Needed in case of incomplete/corrupt downloads. det bool True Whether to perform Detection or not on the input data! rec bool True Whether to perform Recognition or not on the input data! cls bool False Whether to perform Classification or not on the input data! system_overrides str/list None Overrides arguments in infer_system config file. Details here ! Detection args det_algorithm str \"CRAFT\" Specify Detection algorithm to select respective pretrained model. [\"DB\", \"CRAFT\"] Details here ! det_config_name str \"infer_det\" Specify det config filename located inside conf_location as shown here ! More on config structure here ! det_model_location str None Overrides model path present in det_config_name .yaml file! Useful for custom trained models. det_batch_size int 1 Batch size for performing Detection on input data. det_overrides str/list None Overrides arguments in infer_det config file. Details here ! Recognition args rec_algorithm str \"CRNN\" Specify recognition algorithm to select respective pretrained model. [\"CRNN\"] Details here ! rec_config_name str \"infer_rec\" Specify rec config filename located inside conf_location as shown here ! More on config structure here ! rec_model_location str None Overrides model path present in rec_config_name .yaml file! Useful for custom trained models. rec_batch_size int 8 Batch size for performing Recognition on input data. rec_overrides str/list None Overrides arguments in infer_rec config file. Details here ! whitelist str None Only whitelisted characters will be considered during prediction. See example here ! blacklist str None Blacklisted characters will be ignored during prediction. See example here ! Classification args cls_algorithm str \"CLS\" Specify classification algorithm to select respective pretrained model. [\"CLS\"] Details here ! cls_config_name str \"infer_cls\" Specify cls config filename located inside conf_location as shown here ! More on config structure here ! cls_model_location str None Overrides model path present in cls_config_name .yaml file! Useful for custom trained models. cls_batch_size int 8 Batch size for performing Classification on input data. cls_overrides str/list None Overrides arguments in infer_cls config file. Details here !","title":"Argument List"},{"location":"ucr/Index/","text":"","title":"Index"},{"location":"ucr/train/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"train"},{"location":"ucr/ucr/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"ucr"},{"location":"ucr/core/architecture/backbone/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"backbone"},{"location":"ucr/core/architecture/head/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"head"},{"location":"ucr/core/architecture/neck/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"neck"},{"location":"ucr/core/architecture/transform/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"transform"},{"location":"ucr/core/dataloader/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"dataloader"},{"location":"ucr/core/postprocess/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"postprocess"},{"location":"ucr/core/preprocess/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"preprocess"},{"location":"ucr/inference/infer_cls/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"infer_cls"},{"location":"ucr/inference/infer_det/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"infer_det"},{"location":"ucr/inference/infer_rec/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"infer_rec"},{"location":"ucr/inference/infer_system/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"infer_system"},{"location":"ucr/utils/annotation/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"annotation"},{"location":"ucr/utils/utility/","text":"This content will be coming soon! In the meantime: follow us on Twitter and LinkedIn for updates.","title":"utility"}]}